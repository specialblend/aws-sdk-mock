'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var app = _interopDefault(require('commander'));
var fs = require('fs');
var ramda = require('ramda');

const count = ramda.compose(ramda.length, ramda.unless(ramda.is(Array), ramda.keys));
const renderLines = ramda.join('\n');
const collect = ramda.useWith(ramda.concat, [ramda.of, ramda.defaultTo([])]);

const perMethod = ramda.curry((service, method) => ramda.trim(`
${service}.${method} = jest.fn();
${service}.prototype.${method} = jest.fn(unpromisify(${service}.${method}));
`));

const forMethods = ramda.curry(
    (service, methods) =>
        renderLines(
            ramda.map(perMethod(service), methods)
        ),
);

const perService = ramda.curry((service, methods) => `
export const ${service} = jest.fn();
${forMethods(service, methods)}
AWS.${service} = ${service};`);

const forServices = (services, logger) => {
    const mapped = Object
        .entries(services)
        .map(([serviceName, serviceMethods]) => {
            logger(serviceName);
            return perService(serviceName, serviceMethods);
        });
    return renderLines(mapped);
};

const buildMocks = (services, logger = console.log) => `
import unpromisify from '@specialblend/unpromisify';

const AWS = {};

${forServices(services, logger)}

export default AWS;
`;

const manifest = require('./manifest');
const availableServices = ramda.prop('services', manifest);
const logger = name => console.log(`Building mocks for service: ${name}`);

const handleBuild = (outputFile, selectedServices) => {
    const enabledServices = ramda.pick(selectedServices, availableServices);
    const contents = buildMocks(enabledServices, logger);
    fs.writeFileSync(outputFile, contents);
    console.log(`Built mocks for (${count(enabledServices)}) services to file: ${outputFile}.`);
};

app
    .command('build <outputFile>')
    .option('-s, --service <name>', 'Add a AWS services (case-sensitive)', collect, [])
    .action(ramda.useWith(handleBuild, [ramda.identity, ramda.prop('service')]));

app.parse(process.argv);
